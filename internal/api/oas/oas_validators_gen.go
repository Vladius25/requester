// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CreateTaskInput) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Method.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CreateTaskInputMethod) Validate() error {
	switch s {
	case "HEAD":
		return nil
	case "GET":
		return nil
	case "POST":
		return nil
	case "PUT":
		return nil
	case "PATCH":
		return nil
	case "DELETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TaskStatus) Validate() error {
	switch s {
	case "new":
		return nil
	case "done":
		return nil
	case "error":
		return nil
	case "in_process":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *TaskStatusOutput) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.Headers.Set {
			if err := func() error {
				if err := s.Headers.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "headers",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s TaskStatusOutputHeaders) Validate() error {
	var failures []validate.FieldError
	for key, elem := range s {
		if err := func() error {
			if elem == nil {
				return errors.New("nil is invalid value")
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  key,
				Error: err,
			})
		}
	}

	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
