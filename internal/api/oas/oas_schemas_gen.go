// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/createTaskInput
type CreateTaskInput struct {
	// Request body.
	Body OptCreateTaskInputBody `json:"body"`
	// Request headers.
	Headers OptCreateTaskInputHeaders `json:"headers"`
	// Request method.
	Method CreateTaskInputMethod `json:"method"`
	// Request URL.
	URL string `json:"url"`
}

// GetBody returns the value of Body.
func (s *CreateTaskInput) GetBody() OptCreateTaskInputBody {
	return s.Body
}

// GetHeaders returns the value of Headers.
func (s *CreateTaskInput) GetHeaders() OptCreateTaskInputHeaders {
	return s.Headers
}

// GetMethod returns the value of Method.
func (s *CreateTaskInput) GetMethod() CreateTaskInputMethod {
	return s.Method
}

// GetURL returns the value of URL.
func (s *CreateTaskInput) GetURL() string {
	return s.URL
}

// SetBody sets the value of Body.
func (s *CreateTaskInput) SetBody(val OptCreateTaskInputBody) {
	s.Body = val
}

// SetHeaders sets the value of Headers.
func (s *CreateTaskInput) SetHeaders(val OptCreateTaskInputHeaders) {
	s.Headers = val
}

// SetMethod sets the value of Method.
func (s *CreateTaskInput) SetMethod(val CreateTaskInputMethod) {
	s.Method = val
}

// SetURL sets the value of URL.
func (s *CreateTaskInput) SetURL(val string) {
	s.URL = val
}

// Request body.
type CreateTaskInputBody map[string]jx.Raw

func (s *CreateTaskInputBody) init() CreateTaskInputBody {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Request headers.
type CreateTaskInputHeaders map[string]string

func (s *CreateTaskInputHeaders) init() CreateTaskInputHeaders {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Request method.
type CreateTaskInputMethod string

const (
	CreateTaskInputMethodHEAD   CreateTaskInputMethod = "HEAD"
	CreateTaskInputMethodGET    CreateTaskInputMethod = "GET"
	CreateTaskInputMethodPOST   CreateTaskInputMethod = "POST"
	CreateTaskInputMethodPUT    CreateTaskInputMethod = "PUT"
	CreateTaskInputMethodPATCH  CreateTaskInputMethod = "PATCH"
	CreateTaskInputMethodDELETE CreateTaskInputMethod = "DELETE"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateTaskInputMethod) MarshalText() ([]byte, error) {
	switch s {
	case CreateTaskInputMethodHEAD:
		return []byte(s), nil
	case CreateTaskInputMethodGET:
		return []byte(s), nil
	case CreateTaskInputMethodPOST:
		return []byte(s), nil
	case CreateTaskInputMethodPUT:
		return []byte(s), nil
	case CreateTaskInputMethodPATCH:
		return []byte(s), nil
	case CreateTaskInputMethodDELETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTaskInputMethod) UnmarshalText(data []byte) error {
	switch CreateTaskInputMethod(data) {
	case CreateTaskInputMethodHEAD:
		*s = CreateTaskInputMethodHEAD
		return nil
	case CreateTaskInputMethodGET:
		*s = CreateTaskInputMethodGET
		return nil
	case CreateTaskInputMethodPOST:
		*s = CreateTaskInputMethodPOST
		return nil
	case CreateTaskInputMethodPUT:
		*s = CreateTaskInputMethodPUT
		return nil
	case CreateTaskInputMethodPATCH:
		*s = CreateTaskInputMethodPATCH
		return nil
	case CreateTaskInputMethodDELETE:
		*s = CreateTaskInputMethodDELETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/createTaskOutput
type CreateTaskOutput struct {
	// Task ID.
	ID uuid.UUID `json:"id"`
}

// GetID returns the value of ID.
func (s *CreateTaskOutput) GetID() uuid.UUID {
	return s.ID
}

// SetID sets the value of ID.
func (s *CreateTaskOutput) SetID(val uuid.UUID) {
	s.ID = val
}

// GetHealthStatusOK is response for GetHealthStatus operation.
type GetHealthStatusOK struct{}

// GetTaskStatusNotFound is response for GetTaskStatus operation.
type GetTaskStatusNotFound struct{}

func (*GetTaskStatusNotFound) getTaskStatusRes() {}

// NewOptCreateTaskInputBody returns new OptCreateTaskInputBody with value set to v.
func NewOptCreateTaskInputBody(v CreateTaskInputBody) OptCreateTaskInputBody {
	return OptCreateTaskInputBody{
		Value: v,
		Set:   true,
	}
}

// OptCreateTaskInputBody is optional CreateTaskInputBody.
type OptCreateTaskInputBody struct {
	Value CreateTaskInputBody
	Set   bool
}

// IsSet returns true if OptCreateTaskInputBody was set.
func (o OptCreateTaskInputBody) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTaskInputBody) Reset() {
	var v CreateTaskInputBody
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTaskInputBody) SetTo(v CreateTaskInputBody) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTaskInputBody) Get() (v CreateTaskInputBody, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTaskInputBody) Or(d CreateTaskInputBody) CreateTaskInputBody {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTaskInputHeaders returns new OptCreateTaskInputHeaders with value set to v.
func NewOptCreateTaskInputHeaders(v CreateTaskInputHeaders) OptCreateTaskInputHeaders {
	return OptCreateTaskInputHeaders{
		Value: v,
		Set:   true,
	}
}

// OptCreateTaskInputHeaders is optional CreateTaskInputHeaders.
type OptCreateTaskInputHeaders struct {
	Value CreateTaskInputHeaders
	Set   bool
}

// IsSet returns true if OptCreateTaskInputHeaders was set.
func (o OptCreateTaskInputHeaders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTaskInputHeaders) Reset() {
	var v CreateTaskInputHeaders
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTaskInputHeaders) SetTo(v CreateTaskInputHeaders) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTaskInputHeaders) Get() (v CreateTaskInputHeaders, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTaskInputHeaders) Or(d CreateTaskInputHeaders) CreateTaskInputHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaskStatusOutputHeaders returns new OptTaskStatusOutputHeaders with value set to v.
func NewOptTaskStatusOutputHeaders(v TaskStatusOutputHeaders) OptTaskStatusOutputHeaders {
	return OptTaskStatusOutputHeaders{
		Value: v,
		Set:   true,
	}
}

// OptTaskStatusOutputHeaders is optional TaskStatusOutputHeaders.
type OptTaskStatusOutputHeaders struct {
	Value TaskStatusOutputHeaders
	Set   bool
}

// IsSet returns true if OptTaskStatusOutputHeaders was set.
func (o OptTaskStatusOutputHeaders) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaskStatusOutputHeaders) Reset() {
	var v TaskStatusOutputHeaders
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaskStatusOutputHeaders) SetTo(v TaskStatusOutputHeaders) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaskStatusOutputHeaders) Get() (v TaskStatusOutputHeaders, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaskStatusOutputHeaders) Or(d TaskStatusOutputHeaders) TaskStatusOutputHeaders {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/taskStatus
type TaskStatus string

const (
	TaskStatusNew       TaskStatus = "new"
	TaskStatusDone      TaskStatus = "done"
	TaskStatusError     TaskStatus = "error"
	TaskStatusInProcess TaskStatus = "in_process"
)

// MarshalText implements encoding.TextMarshaler.
func (s TaskStatus) MarshalText() ([]byte, error) {
	switch s {
	case TaskStatusNew:
		return []byte(s), nil
	case TaskStatusDone:
		return []byte(s), nil
	case TaskStatusError:
		return []byte(s), nil
	case TaskStatusInProcess:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TaskStatus) UnmarshalText(data []byte) error {
	switch TaskStatus(data) {
	case TaskStatusNew:
		*s = TaskStatusNew
		return nil
	case TaskStatusDone:
		*s = TaskStatusDone
		return nil
	case TaskStatusError:
		*s = TaskStatusError
		return nil
	case TaskStatusInProcess:
		*s = TaskStatusInProcess
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/taskStatusOutput
type TaskStatusOutput struct {
	// Task ID.
	ID uuid.UUID `json:"id"`
	// Processing status.
	Status TaskStatus `json:"status"`
	// Response headers.
	Headers OptTaskStatusOutputHeaders `json:"headers"`
	// Response status code.
	HTTPStatusCode OptInt `json:"http_status_code"`
	// Response content length.
	Length OptInt64 `json:"length"`
}

// GetID returns the value of ID.
func (s *TaskStatusOutput) GetID() uuid.UUID {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *TaskStatusOutput) GetStatus() TaskStatus {
	return s.Status
}

// GetHeaders returns the value of Headers.
func (s *TaskStatusOutput) GetHeaders() OptTaskStatusOutputHeaders {
	return s.Headers
}

// GetHTTPStatusCode returns the value of HTTPStatusCode.
func (s *TaskStatusOutput) GetHTTPStatusCode() OptInt {
	return s.HTTPStatusCode
}

// GetLength returns the value of Length.
func (s *TaskStatusOutput) GetLength() OptInt64 {
	return s.Length
}

// SetID sets the value of ID.
func (s *TaskStatusOutput) SetID(val uuid.UUID) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *TaskStatusOutput) SetStatus(val TaskStatus) {
	s.Status = val
}

// SetHeaders sets the value of Headers.
func (s *TaskStatusOutput) SetHeaders(val OptTaskStatusOutputHeaders) {
	s.Headers = val
}

// SetHTTPStatusCode sets the value of HTTPStatusCode.
func (s *TaskStatusOutput) SetHTTPStatusCode(val OptInt) {
	s.HTTPStatusCode = val
}

// SetLength sets the value of Length.
func (s *TaskStatusOutput) SetLength(val OptInt64) {
	s.Length = val
}

func (*TaskStatusOutput) getTaskStatusRes() {}

// Response headers.
type TaskStatusOutputHeaders map[string][]string

func (s *TaskStatusOutputHeaders) init() TaskStatusOutputHeaders {
	m := *s
	if m == nil {
		m = map[string][]string{}
		*s = m
	}
	return m
}
